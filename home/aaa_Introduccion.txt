Contenedor:
Un contenedor en Docker es una unidad estándar de software que empaqueta código y todas sus
dependencias para que la aplicación se ejecute de manera rápida y confiable en diferentes
entornos. Los contenedores son portátiles, auto-suficientes y fáciles de desplegar.

Comandos:
docker container run: Este comando se utiliza para crear e iniciar un nuevo contenedor a
partir de una imagen Docker.
Ejemplo: docker container run -d --name mi_contenedor nginx crea y ejecuta un contenedor
llamado "mi_contenedor" utilizando la imagen de nginx en segundo plano.

docker container ls: Muestra una lista de todos los contenedores en ejecución.
Ejemplo: docker container ls muestra una lista de todos los contenedores en ejecución en el
sistema.

docker container stop: Detiene un contenedor en ejecución.
Ejemplo: docker container stop mi_contenedor detiene el contenedor llamado "mi_contenedor".

docker container rm: Elimina uno o más contenedores.
Ejemplo: docker container rm mi_contenedor elimina el contenedor llamado "mi_contenedor".

Repositorio de contenedores:
Es un sistema de almacenamiento donde se guardan y organizan las imágenes de contenedores
Docker u otros formatos de contenedores. En esencia, es una biblioteca de imágenes que pueden
ser compartidas, descargadas y utilizadas por otros desarrolladores o equipos.

Estos repositorios permiten a los desarrolladores y equipos de operaciones almacenar versiones
estables de sus aplicaciones y servicios en forma de imágenes de contenedores.
Esto facilita la distribución y el despliegue de software, ya que las imágenes de
contenedores contienen todos los componentes necesarios para ejecutar una aplicación de
manera consistente en diferentes entornos.

Además, los repositorios de contenedores a menudo proporcionan características adicionales,
como control de versiones, etiquetado, búsqueda y acceso controlado para garantizar la
seguridad y la integridad de las imágenes almacenadas.

Repositorios populares para contenedores Docker:

Docker Hub: Es el registro de contenedores más grande y popular. Contiene una amplia variedad
de imágenes Docker, incluidas las oficiales respaldadas por los desarrolladores de software
y las creadas por la comunidad.

GitHub Container Registry: GitHub ahora ofrece su propio registro de contenedores como parte
de su plataforma. Permite a los desarrolladores almacenar imágenes de contenedores junto con
su código fuente y facilita la integración con repositorios de código alojados en GitHub.

Amazon Elastic Container Registry (ECR): Es un servicio totalmente administrado que facilita
el almacenamiento, la administración y la implementación de imágenes de contenedores de
Docker en AWS. Es particularmente útil si estás utilizando otros servicios de AWS para
implementar tu aplicación en contenedores.

Google Container Registry (GCR): Similar a ECR de Amazon, GCR es un servicio de
almacenamiento de imágenes de contenedores que permite a los desarrolladores almacenar,
administrar y desplegar imágenes de contenedores en Google Cloud Platform.

Quay.io: Es un registro de contenedores de código abierto y privado desarrollado por Red Hat.
Ofrece características avanzadas de seguridad, como escaneo de vulnerabilidades y control de
acceso basado en roles.

Azure Container Registry (ACR): Es un servicio de registro de contenedores de Docker
totalmente administrado que funciona con Azure, la plataforma en la nube de Microsoft.
Permite a los desarrolladores almacenar, administrar y desplegar imágenes de
contenedores en Azure.

Estos son solo algunos ejemplos, y hay muchos otros registros de contenedores disponibles.
La elección del registro adecuado depende de tus necesidades específicas, como requisitos
de seguridad, integración con plataformas en la nube y preferencias personales.

Imagen:
Es un paquete ligero y autónomo que incluye todo lo necesario para ejecutar una aplicación:
el código, el tiempo de ejecución, las bibliotecas, las variables de entorno y las
configuraciones. Esencialmente, una imagen Docker es una instantánea estática de un contenedor.

Las imágenes Docker se crean utilizando un archivo de configuración llamado Dockerfile,
que especifica los pasos necesarios para construir la imagen. Estos pasos pueden incluir
la instalación de dependencias, la copia de archivos, la configuración de variables de
entorno y la ejecución de comandos específicos.

Una vez que se crea una imagen Docker, se puede compartir y distribuir a través de un
repositorio de contenedores, como Docker Hub o un registro privado, para que otros
desarrolladores puedan descargarla y ejecutarla en sus propios entornos.

Las imágenes Docker siguen el principio de "una vez construido, en cualquier lugar
ejecutable", lo que significa que una vez que se crea una imagen, se puede implementar
y ejecutar en cualquier lugar que ejecute Docker, independientemente del sistema
operativo subyacente o del entorno de desarrollo.

Pipeline:
Serie automatizada de pasos que se ejecutan secuencialmente para llevar a cabo una tarea o
proceso específico. Los pipelines son fundamentales en la práctica de la integración continua
y la entrega continua (CI/CD), así como en otras metodologías ágiles de desarrollo de software.

Un pipeline típico puede incluir varios pasos, como la compilación del código fuente,
las pruebas unitarias, las pruebas de integración, el análisis estático de código,
la construcción de artefactos, el despliegue en entornos de desarrollo, pruebas automatizadas,
despliegue en entornos de pruebas, y finalmente, despliegue en producción.

Los pipelines permiten automatizar y estandarizar el proceso de desarrollo y despliegue de
software, lo que conduce a una entrega más rápida y confiable de aplicaciones.
Además, facilitan la detección temprana de errores y problemas, ya que las pruebas y
validaciones se realizan de manera sistemática en cada etapa del pipeline.

Los pipelines suelen implementarse utilizando herramientas de automatización y orquestación,
como Jenkins, GitLab CI/CD, Travis CI, CircleCI, entre otras.
Estas herramientas permiten definir, configurar y ejecutar pipelines de manera flexible y
personalizada según las necesidades del proyecto y del equipo de desarrollo.

Docker Desktop:
Es una aplicación que permite a los desarrolladores construir, probar y desplegar aplicaciones
utilizando contenedores Docker en sistemas operativos de escritorio como Windows y macOS.
Proporciona una forma conveniente de trabajar con contenedores sin necesidad de configurar
un entorno complejo manualmente. Docker Desktop es una herramienta muy útil para los
desarrolladores que desean trabajar con contenedores Docker en sus estaciones de trabajo
locales sin necesidad de configuraciones complejas.

Algunas de las características principales de Docker Desktop incluyen:

Motor Docker: Docker Desktop incluye el motor Docker, que es la parte fundamental que
permite la creación y ejecución de contenedores Docker en tu sistema operativo.

CLI de Docker: La interfaz de línea de comandos (CLI) de Docker está integrada en Docker
Desktop, lo que te permite ejecutar comandos Docker directamente desde tu terminal o línea
de comandos.

Docker Compose: Docker Desktop también incluye Docker Compose, una herramienta que facilita
la definición y ejecución de aplicaciones multi-contenedor utilizando un archivo YAML para
describir la configuración de la aplicación.

Docker Hub Integration: Docker Desktop se integra con Docker Hub, el registro de imágenes de
contenedores de Docker, lo que facilita la búsqueda, descarga y gestión de imágenes de contenedores.

Configuración de recursos: Permite configurar la cantidad de recursos del sistema (CPU,
memoria, almacenamiento) que se asignan a Docker Desktop, lo que permite ajustar el
rendimiento según las necesidades del proyecto.

Docker Engine:
Es el componente central de la plataforma Docker. Es un servicio que ejecuta y gestiona los
contenedores Docker en un sistema operativo host. Básicamente, es el motor que permite la
creación, ejecución y gestión de contenedores Docker.

El Docker Engine consta de varios componentes:

Docker Daemon: Es un proceso en segundo plano que se ejecuta en el sistema operativo host
y gestiona los contenedores Docker. El daemon es responsable de recibir comandos de la
interfaz de línea de comandos de Docker (CLI), interactuar con el sistema operativo
subyacente y orquestar la creación, ejecución y gestión de contenedores.

API de Docker: El Docker Daemon expone una API RESTful que permite a los usuarios y
aplicaciones interactuar con el Docker Engine. Esta API se puede utilizar para
realizar operaciones como la creación de contenedores, la gestión de imágenes,
la configuración de redes, entre otras.

CLI de Docker: La interfaz de línea de comandos (CLI) de Docker es una herramienta que
permite a los usuarios interactuar con el Docker Engine utilizando comandos de texto.
Los usuarios pueden utilizar la CLI para ejecutar comandos como docker run, docker build,
docker pull, entre otros, para realizar diversas tareas relacionadas con los contenedores
y las imágenes de Docker.

En resumen, el Docker Engine es el corazón de la plataforma Docker y proporciona las
capacidades fundamentales para la virtualización de contenedores, permitiendo a los
usuarios crear, ejecutar y gestionar aplicaciones en entornos contenerizados de
manera eficiente y portátil.


Docker Desktop y Docker Engine:
Son dos componentes clave dentro del ecosistema de Docker, pero tienen roles
y funcionalidades diferentes:

Docker Engine:
Es el componente esencial de Docker que ejecuta y gestiona los contenedores.
Consiste en el motor de Docker (Docker Engine) y la interfaz de programación de aplicaciones
(API) que permite la comunicación con el motor. Proporciona la funcionalidad básica para
crear, ejecutar y gestionar contenedores Docker en un sistema operativo host.
Docker Engine se instala y se ejecuta directamente en el sistema operativo
del host, ya sea Linux, Windows o macOS a través de la tecnología de virtualización
Hyper-V o WSL 2 en el caso de Windows y HyperKit en el caso de macOS.

Docker Desktop:
Es una aplicación todo en uno que simplifica el desarrollo, la gestión y la implementación
de aplicaciones Docker en sistemas operativos de escritorio, como Windows y macOS.
Incluye Docker Engine, así como herramientas adicionales como Docker CLI, Docker Compose,
y una interfaz gráfica de usuario (GUI) para gestionar contenedores, imágenes y configuraciones.
Docker Desktop proporciona una experiencia de desarrollo local conveniente y rápida 
para los desarrolladores al eliminar la necesidad de configurar manualmente un entorno
Docker en su sistema operativo de escritorio.
Además de facilitar el desarrollo y la prueba de aplicaciones Docker, Docker Desktop
también proporciona integración con Docker Hub y opciones de configuración avanzada,
como la asignación de recursos del sistema para contenedores.

En resumen, Docker Engine es el motor principal que ejecuta los contenedores Docker
en el sistema operativo host, mientras que Docker Desktop es una aplicación que simplifica
el uso y la gestión de Docker en sistemas operativos de escritorio al incluir Docker Engine
y herramientas adicionales en un paquete fácil de instalar y usar.

Port Mapping:
Se refiere a la práctica de asignar puertos de un contenedor Docker a puertos en el sistema
host o a otros contenedores. Esto es esencial para permitir que los servicios dentro de
los contenedores sean accesibles desde fuera del entorno de Docker o desde otros contenedores.